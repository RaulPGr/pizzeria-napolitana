   1: // src/app/api/orders/route.ts
   2: import { NextRequest, NextResponse } from 'next/server';
   3: import { supabaseAdmin } from '@/lib/supabaseAdmin';
   4: 
   5: type ItemInput = { productId: number; quantity: number };
   6: type BodyInput = {
   7:   customer: { name: string; phone: string; email?: string };
   8:   pickupAt: string; // ISO
   9:   items: ItemInput[];
  10:   paymentMethod: 'cash' | 'card';
  11:   notes?: string;
  12: };
  13: 
  14: export async function POST(req: NextRequest) {
  15:   try {
  16:     const body = (await req.json()) as BodyInput;
  17: 
  18:     if (!body.customer?.name || !body.customer?.phone)
  19:       return NextResponse.json(
  20:         { ok: false, message: 'Faltan datos del cliente' },
  21:         { status: 400 }
  22:       );
  23: 
  24:     if (!Array.isArray(body.items) || body.items.length === 0)
  25:       return NextResponse.json(
  26:         { ok: false, message: 'Debes incluir al menos 1 item' },
  27:         { status: 400 }
  28:       );
  29: 
  30:     // Traer precios de productos y calcular totales en céntimos
  31:     const productIds = [...new Set(body.items.map((i) => i.productId))];
  32:     const { data: products, error: prodErr } = await supabaseAdmin
  33:       .from('products')
  34:       .select('id, name, price')
  35:       .in('id', productIds);
  36:     if (prodErr) throw prodErr;
  37: 
  38:     const map = new Map(products?.map((p) => [p.id, p]) || []);
  39: 
  40:     let totalCents = 0;
  41:     const itemsPrepared = body.items.map((i) => {
  42:       const p = map.get(i.productId);
  43:       if (!p) {
  44:         throw new Error(`Producto no existe (id=${i.productId})`);
  45:       }
  46:       const unit_price_cents = Math.round(Number(p.price) * 100);
  47:       const line_total_cents = unit_price_cents * i.quantity;
  48:       totalCents += line_total_cents;
  49:       return {
  50:         product_id: i.productId,
  51:         name: p.name,
  52:         unit_price_cents,
  53:         quantity: i.quantity,
  54:         line_total_cents,
  55:       };
  56:     });
  57: 
  58:     // Decidir estado inicial según método de pago
  59:     const initialStatus = body.paymentMethod === 'card' ? 'confirmed' : 'pending';
  60: 
  61:     // Insertar pedido
  62:     const { data: inserted, error: insErr } = await supabaseAdmin
  63:       .from('orders')
  64:       .insert({
  65:         customer_name: body.customer.name,
  66:         customer_phone: body.customer.phone,
  67:         customer_email: body.customer.email || null,
  68:         pickup_at: body.pickupAt ? new Date(body.pickupAt).toISOString() : null,
  69:         status: initialStatus,
  70:         total_cents: totalCents,
  71:         payment_method: body.paymentMethod,
  72:         payment_status: 'unpaid',
  73:         notes: body.notes || null,
  74:       })
  75:       .select('id')
  76:       .single();
  77:     if (insErr) throw insErr;
  78: 
  79:     const orderId: string = inserted.id;
  80: 
  81:     // Generar code corto (p.ej. primeros 7 chars del uuid)
  82:     const code = orderId.split('-')[0];
  83:     const { error: upErr } = await supabaseAdmin
  84:       .from('orders')
  85:       .update({ code })
  86:       .eq('id', orderId);
  87:     if (upErr) throw upErr;
  88: 
  89:     // Insertar los items
  90:     const { error: itemsErr } = await supabaseAdmin
  91:       .from('order_items')
  92:       .insert(itemsPrepared.map((it) => ({ ...it, order_id: orderId })));
  93:     if (itemsErr) throw itemsErr;
  94: 
  95:     return NextResponse.json({ ok: true, orderId, code });
  96:   } catch (err: any) {
  97:     return NextResponse.json(
  98:       { ok: false, message: err?.message || 'Error creando pedido' },
  99:       { status: 400 }
 100:     );
 101:   }
 102: }
